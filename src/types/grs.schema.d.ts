/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface GraphRewritingRequestSchema {
  hostgraph: GraphSchema;
  rules?: GraphRewritingRuleSchema[];
  sequence?: RewritingRuleProcessingConfigSchema[];
  /**
   * If set to true, the resultset will include the exported hostgraph after each rewriting step in chronological order.
   */
  returnHistory?: boolean;
}
export interface GraphSchema {
  options: {
    /**
     * One of directed or undirected
     */
    type: "directed" | "undirected";
    allowSelfLoops?: boolean;
    multi?: boolean;
  };
  nodes: GraphNodeSchema[];
  edges: GraphEdgeSchema[];
}
export interface GraphNodeSchema {
  /**
   * The node's ID, also used as node in an edges source/target etc.
   */
  key: string;
  /**
   * The node's attributes.
   */
  attributes: {
    /**
     * If given, the type will be used as a Neo4j Node label. Allows for easier debugging.
     */
    type?: string;
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "^(?!type$).*".
     */
    [k: string]: number | string | boolean;
  };
}
export interface GraphEdgeSchema {
  /**
   * The edge's ID
   */
  key: string;
  /**
   * The key of the node at the edge's source
   */
  source: string;
  /**
   * The key of the node at the edge's target
   */
  target: string;
  /**
   * The edges attributes & values
   */
  attributes: {
    type?: string;
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "^(?!type$).*".
     */
    [k: string]: number | string | boolean;
  };
}
export interface GraphRewritingRuleSchema {
  key: string;
  options?: {
    homomorphic?: boolean;
  };
  patternGraph: PatternGraphSchema;
  replacementGraph: ReplacementGraphSchema;
}
export interface PatternGraphSchema {
  options: {
    /**
     * One of directed or undirected
     */
    type: "directed" | "undirected";
    allowSelfLoops?: boolean;
    multi?: boolean;
  };
  nodes: PatternNodeSchema[];
  edges: GraphEdgeSchema[];
  nacs?: {
    nodes?: PatternNodeSchema[];
    edges?: GraphEdgeSchema[];
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
export interface PatternNodeSchema {
  key: string;
  attributes?: {
    type?: string | string[];
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "^(?!type$).*".
     */
    [k: string]: number | string | boolean | null | (number | string | boolean)[];
  };
}
export interface ReplacementGraphSchema {
  options: {
    /**
     * One of directed or undirected
     */
    type: "directed" | "undirected";
    allowSelfLoops?: boolean;
    multi?: boolean;
  };
  nodes: ReplacementNodeSchema[];
  edges: ReplacementEdgeSchema[];
  [k: string]: unknown;
}
export interface ReplacementNodeSchema {
  key: string;
  attributes?: {
    /**
     * If given, the type will be used as a Neo4j Node label. Allows for easier debugging.
     */
    type?: string;
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "^(?!type$).*".
     */
    [k: string]: number | string | boolean | null | GraphInstantiatedAttributeSchema;
  };
  rewriteOptions?: {
    /**
     * Defines how the attributes are handles during rewrite. 'Modify' mode adds or updates the given attributes. Setting an attribute to null deletes it. 'Replace' mode deletes all attributes of the matched node and then sets the given attributes. 'Delete' mode deletes all attributes and doesn't add any new ones.
     */
    attributeReplacementMode?: "modify" | "replace" | "delete";
  };
}
export interface GraphInstantiatedAttributeSchema {
  type: string;
  args: {
    [k: string]: unknown;
  };
}
export interface ReplacementEdgeSchema {
  /**
   * The edge's ID
   */
  key: string;
  /**
   * The key of the node at the edge's source
   */
  source: string;
  /**
   * The key of the node at the edge's target
   */
  target: string;
  /**
   * The edges attributes & values
   */
  attributes: {
    type?: string;
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "^(?!type$).*".
     */
    [k: string]: number | string | boolean | GraphInstantiatedAttributeSchema;
  };
  rewriteOptions?: {
    /**
     * Defines how the attributes are handles during rewrite. 'Modify' mode adds or updates the given attributes. Setting an attribute to null deletes it. 'Replace' mode deletes all attributes of the matched node and then sets the given attributes. 'Delete' mode deletes all attributes and doesn't add any new ones.
     */
    attributeReplacementMode?: "modify" | "replace" | "delete";
  };
}
export interface RewritingRuleProcessingConfigSchema {
  /**
   * The key of the graph rewriting rule to execute
   */
  rule: string;
  /**
   * The processing configuration for the rule
   */
  options: {
    /**
     * Replace either 'all', only the 'first' or between x and y pattern matches
     */
    mode?: "all" | "first" | "intervall";
    intervall?: {
      min: number;
      max: number;
    };
  };
}
