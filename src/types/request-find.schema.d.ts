/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface GraphFindPatternRequestSchema {
  hostgraph: GraphSchema;
  /**
   * @minItems 1
   * @maxItems 1
   */
  rules: [GraphFindRuleSchema];
}
export interface GraphSchema {
  options: {
    /**
     * Type of the graph: either directed or undirected
     */
    type: "directed" | "undirected";
  };
  nodes: GraphNodeSchema[];
  edges: GraphEdgeSchema[];
}
export interface GraphNodeSchema {
  /**
   * The node's ID, also used as node in an edges source/target etc.
   */
  key: string;
  /**
   * The node's attributes.
   */
  attributes: {
    [k: string]: number | string | boolean;
  };
}
export interface GraphEdgeSchema {
  /**
   * The edge's ID
   */
  key: string;
  /**
   * The key of the node at the edge's source
   */
  source: string;
  /**
   * The key of the node at the edge's target
   */
  target: string;
  /**
   * The edges attributes & values
   */
  attributes: {
    [k: string]: number | string | boolean;
  };
}
export interface GraphFindRuleSchema {
  key?: string;
  patternGraph: PatternGraphSchema;
  options?: {
    homomorphic?: boolean;
  };
}
export interface PatternGraphSchema {
  options: {
    /**
     * Type of the graph: either directed or undirected
     */
    type: "directed" | "undirected";
  };
  nodes: PatternNodeSchema[];
  edges: GraphEdgeSchema[];
  nacs?: NacSchema[];
}
export interface PatternNodeSchema {
  key: string;
  attributes?: {
    [k: string]: number | string | boolean | null | (number | string | boolean)[];
  };
}
export interface NacSchema {
  options?: {
    /**
     * Type of the graph: either directed or undirected
     */
    type?: "directed" | "undirected";
    [k: string]: unknown;
  };
  nodes: PatternNodeSchema[];
  edges: GraphEdgeSchema[];
}
